   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  11               		.section	.text.startup,"ax",@progbits
  16               	.global	main
  18               	main:
   1:src/main.c    **** /*
   2:src/main.c    ****  * Created by gt on 1/2/22 - 9:26 PM.
   3:src/main.c    ****  * Copyright (c) 2022 GTXC. All rights reserved.
   4:src/main.c    ****  */
   5:src/main.c    **** 
   6:src/main.c    **** #include <avr/io.h>
   7:src/main.c    **** #include <util/delay.h>
   8:src/main.c    **** #include <stdio.h>
   9:src/main.c    **** #include "LCDmodule.h"
  10:src/main.c    **** 
  11:src/main.c    **** void PrintByte(char *OutputString,
  12:src/main.c    ****                char *PromptString,
  13:src/main.c    ****                char ByteVar);
  14:src/main.c    **** 
  15:src/main.c    **** // to obtain 1kSPS rate, main loop should last 1ms
  16:src/main.c    **** int main(void) {
  20               	.LM0:
  21               	.LFBB1:
  22               	/* prologue: function */
  23               	/* frame size = 0 */
  24               	/* stack size = 0 */
  25               	.L__stack_usage = 0
  17:src/main.c    ****     DDRB = 0xFF;
  27               	.LM1:
  28 0000 8FEF      		ldi r24,lo8(-1)
  29 0002 84B9      		out 0x4,r24
  18:src/main.c    ****     DDRC = 0xFC;
  31               	.LM2:
  32 0004 8CEF      		ldi r24,lo8(-4)
  33 0006 87B9      		out 0x7,r24
  19:src/main.c    ****     DDRD = 0xFC;    // PORTD[0:1] -> input, PORTD[2:7] -> output
  35               	.LM3:
  36 0008 8AB9      		out 0xa,r24
  20:src/main.c    **** 
  21:src/main.c    ****     DIDR0 = 0x3F;
  38               	.LM4:
  39 000a 8FE3      		ldi r24,lo8(63)
  40 000c 8093 7E00 		sts 126,r24
  22:src/main.c    ****     PRR &= ~_BV(PRADC);
  42               	.LM5:
  43 0010 8091 6400 		lds r24,100
  44 0014 8E7F      		andi r24,lo8(-2)
  45 0016 8093 6400 		sts 100,r24
  23:src/main.c    ****     // ADMUX : 0000 0000; AND
  24:src/main.c    ****     ADMUX &= ~_BV(REFS0);
  47               	.LM6:
  48 001a 8091 7C00 		lds r24,124
  49 001e 8F7B      		andi r24,lo8(-65)
  50 0020 8093 7C00 		sts 124,r24
  25:src/main.c    ****     ADMUX &= ~_BV(REFS1);
  52               	.LM7:
  53 0024 8091 7C00 		lds r24,124
  54 0028 8F77      		andi r24,lo8(127)
  55 002a 8093 7C00 		sts 124,r24
  26:src/main.c    ****     ADMUX |= _BV(ADLAR);
  57               	.LM8:
  58 002e 8091 7C00 		lds r24,124
  59 0032 8062      		ori r24,lo8(32)
  60 0034 8093 7C00 		sts 124,r24
  27:src/main.c    ****     ADMUX |= _BV(MUX0);
  62               	.LM9:
  63 0038 8091 7C00 		lds r24,124
  64 003c 8160      		ori r24,lo8(1)
  65 003e 8093 7C00 		sts 124,r24
  28:src/main.c    ****     ADMUX &= ~_BV(MUX1);
  67               	.LM10:
  68 0042 8091 7C00 		lds r24,124
  69 0046 8D7F      		andi r24,lo8(-3)
  70 0048 8093 7C00 		sts 124,r24
  29:src/main.c    ****     ADMUX &= ~_BV(MUX2);
  72               	.LM11:
  73 004c 8091 7C00 		lds r24,124
  74 0050 8B7F      		andi r24,lo8(-5)
  75 0052 8093 7C00 		sts 124,r24
  30:src/main.c    ****     ADMUX &= ~_BV(MUX3);
  77               	.LM12:
  78 0056 8091 7C00 		lds r24,124
  79 005a 877F      		andi r24,lo8(-9)
  80 005c 8093 7C00 		sts 124,r24
  31:src/main.c    **** 
  32:src/main.c    ****     // ADCSRA : 0000 0000 OR
  33:src/main.c    ****     ADCSRA |= _BV(ADEN);
  82               	.LM13:
  83 0060 8091 7A00 		lds r24,122
  84 0064 8068      		ori r24,lo8(-128)
  85 0066 8093 7A00 		sts 122,r24
  34:src/main.c    ****     ADCSRA &= ~_BV(ADPS0);
  87               	.LM14:
  88 006a 8091 7A00 		lds r24,122
  89 006e 8E7F      		andi r24,lo8(-2)
  90 0070 8093 7A00 		sts 122,r24
  35:src/main.c    **** //    ADCSRA &= ~_BV(ADPS1);
  36:src/main.c    **** //    ADCSRA &= ~_BV(ADPS2);
  37:src/main.c    ****     ADCSRA |= _BV(ADPS1);
  92               	.LM15:
  93 0074 8091 7A00 		lds r24,122
  94 0078 8260      		ori r24,lo8(2)
  95 007a 8093 7A00 		sts 122,r24
  38:src/main.c    ****     ADCSRA |= _BV(ADPS2);
  97               	.LM16:
  98 007e 8091 7A00 		lds r24,122
  99 0082 8460      		ori r24,lo8(4)
 100 0084 8093 7A00 		sts 122,r24
  39:src/main.c    **** 
  40:src/main.c    ****     LCD_Init();
 102               	.LM17:
 103 0088 0E94 0000 		call LCD_Init
  41:src/main.c    ****     PORTD |= _BV(PIND2);
 105               	.LM18:
 106 008c 5A9A      		sbi 0xb,2
  42:src/main.c    ****     char str[16];
  43:src/main.c    ****     unsigned char result;
  44:src/main.c    **** //    sprintf(str, "%i", ~_BV(REFS1));
  45:src/main.c    ****     unsigned char atten = 1;
  46:src/main.c    ****     unsigned char adch_tmp;
  47:src/main.c    **** //    sprintf(str, "Atten=%3i", atten);
  48:src/main.c    **** //    LCD_WriteString(str);
  49:src/main.c    **** //    LCD_MoveCursor(1,7);
  50:src/main.c    **** 
  51:src/main.c    ****     int pind0_curr = PIND & _BV(PIND0);
 108               	.LM19:
 109 008e 89B1      		in r24,0x9
 111               	.LM20:
 112 0090 8170      		andi r24,1
 113 0092 C82F      		mov r28,r24
 114 0094 80E0      		ldi r24,0
 115 0096 D82F      		mov r29,r24
  52:src/main.c    ****     int pind1_curr = PIND & _BV(PIND1);
 117               	.LM21:
 118 0098 29B1      		in r18,0x9
 120               	.LM22:
 121 009a 2270      		andi r18,lo8(2)
 122 009c 30E0      		ldi r19,0
  45:src/main.c    ****     unsigned char adch_tmp;
 124               	.LM23:
 125 009e 81E0      		ldi r24,lo8(1)
 126               	.L6:
  53:src/main.c    ****     int pind0_prev, pind1_prev;
  54:src/main.c    **** 
  55:src/main.c    ****     while (1) {
  56:src/main.c    **** 
  57:src/main.c    ****         pind0_prev = pind0_curr;
  58:src/main.c    ****         pind1_prev = pind1_curr;
  59:src/main.c    ****         pind0_curr = PIND & _BV(PIND0);
 128               	.LM24:
 129 00a0 99B1      		in r25,0x9
 130 00a2 592F      		mov r21,r25
 131 00a4 5170      		andi r21,lo8(1)
 133               	.LM25:
 134 00a6 9170      		andi r25,1
  60:src/main.c    ****         pind1_curr = PIND & _BV(PIND1);
 136               	.LM26:
 137 00a8 49B1      		in r20,0x9
 138 00aa 4270      		andi r20,lo8(2)
 140               	.LM27:
 141 00ac 642F      		mov r22,r20
 142 00ae 70E0      		ldi r23,0
  61:src/main.c    ****         if (pind0_prev && !pind0_curr) {
 144               	.LM28:
 145 00b0 CD2B      		or r28,r29
 146 00b2 01F0      		breq .L2
 148               	.LM29:
 149 00b4 5111      		cpse r21,__zero_reg__
 150 00b6 00C0      		rjmp .L2
  62:src/main.c    ****             --atten;
 152               	.LM30:
 153 00b8 8150      		subi r24,lo8(-(-1))
  63:src/main.c    ****             if (atten < 1) atten = 11;
 155               	.LM31:
 156 00ba 01F4      		brne .L2
 158               	.LM32:
 159 00bc 8BE0      		ldi r24,lo8(11)
 160               	.L2:
  64:src/main.c    **** //            PORTD |= 0x20;
  65:src/main.c    **** //            PORTD |= 0x10;
  66:src/main.c    **** //            sprintf(str, "Atten=%3i", atten);
  67:src/main.c    **** //            PrintByte(str, "", atten);
  68:src/main.c    **** //            PORTD &= 0xEF;
  69:src/main.c    **** //            PORTD &= 0xDF;
  70:src/main.c    **** 
  71:src/main.c    ****         }
  72:src/main.c    ****         if (pind1_prev && !pind1_curr) {
 162               	.LM33:
 163 00be 232B      		or r18,r19
 164 00c0 01F0      		breq .L3
 166               	.LM34:
 167 00c2 4111      		cpse r20,__zero_reg__
 168 00c4 00C0      		rjmp .L3
  73:src/main.c    ****             ++atten;
 170               	.LM35:
 171 00c6 8F5F      		subi r24,lo8(-(1))
  74:src/main.c    ****             if (atten > 11) atten = 1;
 173               	.LM36:
 174 00c8 8C30      		cpi r24,lo8(12)
 175 00ca 01F4      		brne .L3
 177               	.LM37:
 178 00cc 81E0      		ldi r24,lo8(1)
 179               	.L3:
  75:src/main.c    **** //            PORTD |= 0x20;
  76:src/main.c    **** //            LCD_MoveCursor(1, 7);
  77:src/main.c    **** //            PORTD |= 0x10;
  78:src/main.c    **** //            sprintf(str, "Atten=%3i", atten);
  79:src/main.c    **** //            PrintByte(str, "", atten);
  80:src/main.c    **** //            PORTD &= 0xEF;
  81:src/main.c    **** //            LCD_WriteString(str);
  82:src/main.c    **** //            PORTD &= 0xDF;
  83:src/main.c    **** 
  84:src/main.c    ****         }
  85:src/main.c    **** //        if (PORTD | _BV(PIND2)) {
  86:src/main.c    **** //            PORTD &= ~_BV(PIND3);
  87:src/main.c    **** //            ADCSRA |= _BV(ADSC);
  88:src/main.c    **** //            while (ADCSRA & _BV(ADSC)) {}
  89:src/main.c    **** //            result = ADCH;
  90:src/main.c    **** ////            _delay_us(50);
  91:src/main.c    **** //            PrintByte(str, "", result);
  92:src/main.c    **** //            LCD_MoveCursor(1, 1);
  93:src/main.c    **** //            LCD_WriteString(str);
  94:src/main.c    **** ////            _delay_us(50);
  95:src/main.c    **** //            PORTD &= ~_BV(PIND2);
  96:src/main.c    **** //            PORTD |= _BV(PIND3);
  97:src/main.c    **** //        }
  98:src/main.c    **** //        if (PORTD | _BV(PIND3)) {
  99:src/main.c    **** //            PORTD &= ~_BV(PIND2);
 100:src/main.c    ****             ADCSRA |= _BV(ADSC);
 181               	.LM38:
 182 00ce 2091 7A00 		lds r18,122
 183 00d2 2064      		ori r18,lo8(64)
 184 00d4 2093 7A00 		sts 122,r18
 185               	.L4:
 101:src/main.c    ****             while (ADCSRA & _BV(ADSC)) {}
 187               	.LM39:
 188 00d8 2091 7A00 		lds r18,122
 189 00dc 26FD      		sbrc r18,6
 190 00de 00C0      		rjmp .L4
 102:src/main.c    ****             adch_tmp = ADCH >> (atten / 2);
 192               	.LM40:
 193 00e0 2091 7900 		lds r18,121
 194 00e4 30E0      		ldi r19,0
 196               	.LM41:
 197 00e6 482F      		mov r20,r24
 198 00e8 4695      		lsr r20
 200               	.LM42:
 201 00ea 00C0      		rjmp 2f
 202               		1:
 203 00ec 3595      		asr r19
 204 00ee 2795      		ror r18
 205               		2:
 206 00f0 4A95      		dec r20
 207 00f2 02F4      		brpl 1b
 209               	.LM43:
 210 00f4 422F      		mov r20,r18
 103:src/main.c    ****             PORTB = atten % 2 ? adch_tmp : adch_tmp + (adch_tmp >> 1);
 212               	.LM44:
 213 00f6 80FD      		sbrc r24,0
 214 00f8 00C0      		rjmp .L5
 216               	.LM45:
 217 00fa 4695      		lsr r20
 219               	.LM46:
 220 00fc 420F      		add r20,r18
 221               	.L5:
 223               	.LM47:
 224 00fe 45B9      		out 0x5,r20
 225               	.LBB4:
 226               	.LBB5:
 228               	.Ltext1:
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/avr/include/util/delay.h **** 
 189:/usr/avr/include/util/delay.h **** #else
 190:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/avr/include/util/delay.h **** 	{
 196:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/avr/include/util/delay.h **** 		{
 200:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/avr/include/util/delay.h **** 		}
 204:/usr/avr/include/util/delay.h **** 		return;
 205:/usr/avr/include/util/delay.h **** 	}
 206:/usr/avr/include/util/delay.h **** 	else
 207:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/avr/include/util/delay.h **** #endif
 210:/usr/avr/include/util/delay.h **** }
 211:/usr/avr/include/util/delay.h **** 
 212:/usr/avr/include/util/delay.h **** /**
 213:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/avr/include/util/delay.h **** 
 215:/usr/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/avr/include/util/delay.h **** 
 217:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/avr/include/util/delay.h **** 
 220:/usr/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/avr/include/util/delay.h **** 
 222:/usr/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/avr/include/util/delay.h **** 
 226:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/avr/include/util/delay.h **** 
 231:/usr/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/avr/include/util/delay.h **** 
 236:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/avr/include/util/delay.h ****    respectively.
 240:/usr/avr/include/util/delay.h **** 
 241:/usr/avr/include/util/delay.h ****    \note
 242:/usr/avr/include/util/delay.h **** 
 243:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/avr/include/util/delay.h **** 
 253:/usr/avr/include/util/delay.h ****  */
 254:/usr/avr/include/util/delay.h **** void
 255:/usr/avr/include/util/delay.h **** _delay_us(double __us)
 256:/usr/avr/include/util/delay.h **** {
 257:/usr/avr/include/util/delay.h **** 	double __tmp ;
 258:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 262:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:/usr/avr/include/util/delay.h **** 
 265:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/avr/include/util/delay.h **** 
 268:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/avr/include/util/delay.h **** 
 271:/usr/avr/include/util/delay.h **** 	#else
 272:/usr/avr/include/util/delay.h **** 		//round up by default
 273:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:/usr/avr/include/util/delay.h **** 	#endif
 275:/usr/avr/include/util/delay.h **** 
 276:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 230               	.LM48:
 231 0100 EBE4      		ldi r30,lo8(1099)
 232 0102 F4E0      		ldi r31,hi8(1099)
 233 0104 3197      	1:	sbiw r30,1
 234 0106 01F4      		brne 1b
 235 0108 00C0      		rjmp .
 236 010a 0000      		nop
 237               	.LBE5:
 238               	.LBE4:
 240               	.Ltext2:
  60:src/main.c    ****         if (pind0_prev && !pind0_curr) {
 242               	.LM49:
 243 010c 9B01      		movw r18,r22
  59:src/main.c    ****         pind1_curr = PIND & _BV(PIND1);
 245               	.LM50:
 246 010e C92F      		mov r28,r25
 247 0110 F0E0      		ldi r31,0
 248 0112 DF2F      		mov r29,r31
 249               	.LBB7:
 250               	.LBB6:
 252               	.Ltext3:
 277:/usr/avr/include/util/delay.h **** 
 278:/usr/avr/include/util/delay.h **** #else
 279:/usr/avr/include/util/delay.h **** 	uint8_t __ticks;
 280:/usr/avr/include/util/delay.h **** 	double __tmp2 ;
 281:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 3e6) * __us;
 282:/usr/avr/include/util/delay.h **** 	__tmp2 = ((F_CPU) / 4e6) * __us;
 283:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 284:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 285:/usr/avr/include/util/delay.h **** 	else if (__tmp2 > 65535)
 286:/usr/avr/include/util/delay.h **** 	{
 287:/usr/avr/include/util/delay.h **** 		_delay_ms(__us / 1000.0);
 288:/usr/avr/include/util/delay.h **** 	}
 289:/usr/avr/include/util/delay.h **** 	else if (__tmp > 255)
 290:/usr/avr/include/util/delay.h **** 	{
 291:/usr/avr/include/util/delay.h **** 		uint16_t __ticks=(uint16_t)__tmp2;
 292:/usr/avr/include/util/delay.h **** 		_delay_loop_2(__ticks);
 293:/usr/avr/include/util/delay.h **** 		return;
 294:/usr/avr/include/util/delay.h **** 	}
 295:/usr/avr/include/util/delay.h **** 	else
 296:/usr/avr/include/util/delay.h **** 		__ticks = (uint8_t)__tmp;
 297:/usr/avr/include/util/delay.h **** 	_delay_loop_1(__ticks);
 298:/usr/avr/include/util/delay.h **** #endif
 299:/usr/avr/include/util/delay.h **** }
 254               	.LM51:
 255 0114 00C0      		rjmp .L6
 256               	.LBE6:
 257               	.LBE7:
 263               	.Lscope1:
 264               		.text
 266               	.Letext0:
 267               		.ident	"GCC: (GNU) 11.2.0"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cckRCdjM.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cckRCdjM.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cckRCdjM.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cckRCdjM.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cckRCdjM.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cckRCdjM.s:18     .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
LCD_Init
