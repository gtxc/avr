   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  11               		.section	.rodata.str1.1,"aMS",@progbits,1
  12               	.LC0:
  13 0000 4174 7465 		.string	"Atten=%3i"
  13      6E3D 2533 
  13      6900 
  14               	.LC1:
  15 000a 00        		.string	""
  16               		.section	.text.startup,"ax",@progbits
  21               	.global	main
  23               	main:
   1:src/main.c    **** /*
   2:src/main.c    ****  * Created by gt on 1/2/22 - 9:26 PM.
   3:src/main.c    ****  * Copyright (c) 2022 GTXC. All rights reserved.
   4:src/main.c    ****  */
   5:src/main.c    **** 
   6:src/main.c    **** #include <avr/io.h>
   7:src/main.c    **** #include <util/delay.h>
   8:src/main.c    **** #include <stdio.h>
   9:src/main.c    **** #include "LCDmodule.h"
  10:src/main.c    **** 
  11:src/main.c    **** void PrintByte(char *OutputString,
  12:src/main.c    ****                char *PromptString,
  13:src/main.c    ****                char ByteVar);
  14:src/main.c    **** // 173us 750us
  15:src/main.c    **** int main(void) {
  25               	.LM0:
  26               	.LFBB1:
  27 0000 CDB7      		in r28,__SP_L__
  28 0002 DEB7      		in r29,__SP_H__
  29 0004 6097      		sbiw r28,16
  30 0006 0FB6      		in __tmp_reg__,__SREG__
  31 0008 F894      		cli
  32 000a DEBF      		out __SP_H__,r29
  33 000c 0FBE      		out __SREG__,__tmp_reg__
  34 000e CDBF      		out __SP_L__,r28
  35               	/* prologue: function */
  36               	/* frame size = 16 */
  37               	/* stack size = 16 */
  38               	.L__stack_usage = 16
  16:src/main.c    ****     DDRB = 0xFF;
  40               	.LM1:
  41 0010 8FEF      		ldi r24,lo8(-1)
  42 0012 84B9      		out 0x4,r24
  17:src/main.c    ****     DDRD = 0xFC;    // PORTD[0:1] -> input, PORTD[2:7] -> output
  44               	.LM2:
  45 0014 8CEF      		ldi r24,lo8(-4)
  46 0016 8AB9      		out 0xa,r24
  18:src/main.c    **** //    PORTD = 0x03;   // turns on internal pull-ups for PIND1 and PIND2
  19:src/main.c    ****     LCD_Init();
  48               	.LM3:
  49 0018 0E94 0000 		call LCD_Init
  20:src/main.c    ****     LCD_Clear();
  51               	.LM4:
  52 001c 0E94 0000 		call LCD_Clear
  21:src/main.c    ****     char str[16];
  22:src/main.c    ****     unsigned char atten = 1;
  23:src/main.c    ****     sprintf(str, "Atten=%3i", atten);
  54               	.LM5:
  55 0020 1F92      		push __zero_reg__
  56 0022 81E0      		ldi r24,lo8(1)
  57 0024 8F93      		push r24
  58 0026 80E0      		ldi r24,lo8(.LC0)
  59 0028 90E0      		ldi r25,hi8(.LC0)
  60 002a 9F93      		push r25
  61 002c 8F93      		push r24
  62 002e CE01      		movw r24,r28
  63 0030 0196      		adiw r24,1
  64 0032 4C01      		movw r8,r24
  65 0034 9F93      		push r25
  66 0036 8F93      		push r24
  67 0038 0E94 0000 		call sprintf
  24:src/main.c    ****     LCD_WriteString(str);
  69               	.LM6:
  70 003c C401      		movw r24,r8
  71 003e 0E94 0000 		call LCD_WriteString
  25:src/main.c    ****     LCD_MoveCursor(1,7);
  73               	.LM7:
  74 0042 67E0      		ldi r22,lo8(7)
  75 0044 81E0      		ldi r24,lo8(1)
  76 0046 0E94 0000 		call LCD_MoveCursor
  26:src/main.c    ****     int pind0_curr = PIND & _BV(PIND0);
  78               	.LM8:
  79 004a 89B1      		in r24,0x9
  81               	.LM9:
  82 004c 80FB      		bst r24,0
  83 004e CC24      		clr r12
  84 0050 C0F8      		bld r12,0
  85 0052 D12C      		mov r13,__zero_reg__
  27:src/main.c    ****     int pind1_curr = PIND & _BV(PIND1);
  87               	.LM10:
  88 0054 89B1      		in r24,0x9
  90               	.LM11:
  91 0056 8270      		andi r24,lo8(2)
  92 0058 E82E      		mov r14,r24
  93 005a F12C      		mov r15,__zero_reg__
  94 005c 0F90      		pop __tmp_reg__
  95 005e 0F90      		pop __tmp_reg__
  96 0060 0F90      		pop __tmp_reg__
  97 0062 0F90      		pop __tmp_reg__
  98 0064 0F90      		pop __tmp_reg__
  99 0066 0F90      		pop __tmp_reg__
  22:src/main.c    ****     sprintf(str, "Atten=%3i", atten);
 101               	.LM12:
 102 0068 11E0      		ldi r17,lo8(1)
 103 006a B82C      		mov r11,r8
 104 006c A92C      		mov r10,r9
 105               	.L6:
  28:src/main.c    ****     int pind0_prev, pind1_prev;
  29:src/main.c    ****     while (1) {
  30:src/main.c    ****         pind0_prev = pind0_curr;
  31:src/main.c    ****         pind1_prev = pind1_curr;
  32:src/main.c    ****         pind0_curr = PIND & _BV(PIND0);
 107               	.LM13:
 108 006e 09B1      		in r16,0x9
 109 0070 902F      		mov r25,r16
 110 0072 9170      		andi r25,lo8(1)
 112               	.LM14:
 113 0074 0170      		andi r16,1
  33:src/main.c    ****         pind1_curr = PIND & _BV(PIND1);
 115               	.LM15:
 116 0076 89B1      		in r24,0x9
 117 0078 8270      		andi r24,lo8(2)
 118 007a 782E      		mov r7,r24
 120               	.LM16:
 121 007c 882E      		mov r8,r24
 122 007e 912C      		mov r9,__zero_reg__
  34:src/main.c    ****         if (pind0_prev && !pind0_curr) {
 124               	.LM17:
 125 0080 CD28      		or r12,r13
 126 0082 01F0      		breq .L2
 128               	.LM18:
 129 0084 9111      		cpse r25,__zero_reg__
 130 0086 00C0      		rjmp .L2
  35:src/main.c    ****             --atten;
 132               	.LM19:
 133 0088 1150      		subi r17,lo8(-(-1))
  36:src/main.c    ****             if (atten < 1) atten = 11;
 135               	.LM20:
 136 008a 01F4      		brne .L3
 138               	.LM21:
 139 008c 1BE0      		ldi r17,lo8(11)
 140               	.L3:
  37:src/main.c    ****             PORTD |= 0x20;
 142               	.LM22:
 143 008e 5D9A      		sbi 0xb,5
  38:src/main.c    ****             LCD_MoveCursor(1, 7);
 145               	.LM23:
 146 0090 67E0      		ldi r22,lo8(7)
 147 0092 81E0      		ldi r24,lo8(1)
 148 0094 0E94 0000 		call LCD_MoveCursor
  39:src/main.c    ****             PORTD |= 0x10;
 150               	.LM24:
 151 0098 5C9A      		sbi 0xb,4
  40:src/main.c    **** //            sprintf(str, "Atten=%3i", atten);
  41:src/main.c    ****             PrintByte(str, "", atten);
 153               	.LM25:
 154 009a 412F      		mov r20,r17
 155 009c 60E0      		ldi r22,lo8(.LC1)
 156 009e 70E0      		ldi r23,hi8(.LC1)
 157 00a0 8B2D      		mov r24,r11
 158 00a2 9A2D      		mov r25,r10
 159 00a4 0E94 0000 		call PrintByte
  42:src/main.c    ****             PORTD &= 0xEF;
 161               	.LM26:
 162 00a8 5C98      		cbi 0xb,4
  43:src/main.c    ****             LCD_WriteString(str);
 164               	.LM27:
 165 00aa 8B2D      		mov r24,r11
 166 00ac 9A2D      		mov r25,r10
 167 00ae 0E94 0000 		call LCD_WriteString
  44:src/main.c    ****             PORTD &= 0xDF;
 169               	.LM28:
 170 00b2 5D98      		cbi 0xb,5
 171               	.L2:
  45:src/main.c    ****         }
  46:src/main.c    ****         if (pind1_prev && !pind1_curr) {
 173               	.LM29:
 174 00b4 EF28      		or r14,r15
 175 00b6 01F0      		breq .L4
 177               	.LM30:
 178 00b8 7110      		cpse r7,__zero_reg__
 179 00ba 00C0      		rjmp .L4
  47:src/main.c    ****             ++atten;
 181               	.LM31:
 182 00bc 1F5F      		subi r17,lo8(-(1))
  48:src/main.c    ****             if (atten > 11) atten = 1;
 184               	.LM32:
 185 00be 1C30      		cpi r17,lo8(12)
 186 00c0 01F4      		brne .L5
 188               	.LM33:
 189 00c2 11E0      		ldi r17,lo8(1)
 190               	.L5:
  49:src/main.c    ****             PORTD |= 0x20;
 192               	.LM34:
 193 00c4 5D9A      		sbi 0xb,5
  50:src/main.c    ****             LCD_MoveCursor(1, 7);
 195               	.LM35:
 196 00c6 67E0      		ldi r22,lo8(7)
 197 00c8 81E0      		ldi r24,lo8(1)
 198 00ca 0E94 0000 		call LCD_MoveCursor
  51:src/main.c    ****             PORTD |= 0x10;
 200               	.LM36:
 201 00ce 5C9A      		sbi 0xb,4
  52:src/main.c    **** //            sprintf(str, "Atten=%3i", atten);
  53:src/main.c    ****             PrintByte(str, "", atten);
 203               	.LM37:
 204 00d0 412F      		mov r20,r17
 205 00d2 60E0      		ldi r22,lo8(.LC1)
 206 00d4 70E0      		ldi r23,hi8(.LC1)
 207 00d6 8B2D      		mov r24,r11
 208 00d8 9A2D      		mov r25,r10
 209 00da 0E94 0000 		call PrintByte
  54:src/main.c    ****             PORTD &= 0xEF;
 211               	.LM38:
 212 00de 5C98      		cbi 0xb,4
  55:src/main.c    ****             LCD_WriteString(str);
 214               	.LM39:
 215 00e0 8B2D      		mov r24,r11
 216 00e2 9A2D      		mov r25,r10
 217 00e4 0E94 0000 		call LCD_WriteString
  56:src/main.c    ****             PORTD &= 0xDF;
 219               	.LM40:
 220 00e8 5D98      		cbi 0xb,5
 221               	.L4:
 222               	.LBB4:
 223               	.LBB5:
 225               	.Ltext1:
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/avr/include/util/delay.h **** 
 189:/usr/avr/include/util/delay.h **** #else
 190:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/avr/include/util/delay.h **** 	{
 196:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/avr/include/util/delay.h **** 		{
 200:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/avr/include/util/delay.h **** 		}
 204:/usr/avr/include/util/delay.h **** 		return;
 205:/usr/avr/include/util/delay.h **** 	}
 206:/usr/avr/include/util/delay.h **** 	else
 207:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/avr/include/util/delay.h **** #endif
 210:/usr/avr/include/util/delay.h **** }
 211:/usr/avr/include/util/delay.h **** 
 212:/usr/avr/include/util/delay.h **** /**
 213:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/avr/include/util/delay.h **** 
 215:/usr/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/avr/include/util/delay.h **** 
 217:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/avr/include/util/delay.h **** 
 220:/usr/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/avr/include/util/delay.h **** 
 222:/usr/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/avr/include/util/delay.h **** 
 226:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/avr/include/util/delay.h **** 
 231:/usr/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/avr/include/util/delay.h **** 
 236:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/avr/include/util/delay.h ****    respectively.
 240:/usr/avr/include/util/delay.h **** 
 241:/usr/avr/include/util/delay.h ****    \note
 242:/usr/avr/include/util/delay.h **** 
 243:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/avr/include/util/delay.h **** 
 253:/usr/avr/include/util/delay.h ****  */
 254:/usr/avr/include/util/delay.h **** void
 255:/usr/avr/include/util/delay.h **** _delay_us(double __us)
 256:/usr/avr/include/util/delay.h **** {
 257:/usr/avr/include/util/delay.h **** 	double __tmp ;
 258:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 262:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:/usr/avr/include/util/delay.h **** 
 265:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/avr/include/util/delay.h **** 
 268:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/avr/include/util/delay.h **** 
 271:/usr/avr/include/util/delay.h **** 	#else
 272:/usr/avr/include/util/delay.h **** 		//round up by default
 273:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:/usr/avr/include/util/delay.h **** 	#endif
 275:/usr/avr/include/util/delay.h **** 
 276:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 227               	.LM41:
 228 00ea 87EE      		ldi r24,lo8(999)
 229 00ec 93E0      		ldi r25,hi8(999)
 230 00ee 0197      	1:	sbiw r24,1
 231 00f0 01F4      		brne 1b
 232 00f2 00C0      		rjmp .
 233 00f4 0000      		nop
 234               	.LBE5:
 235               	.LBE4:
 237               	.Ltext2:
  33:src/main.c    ****         if (pind0_prev && !pind0_curr) {
 239               	.LM42:
 240 00f6 7401      		movw r14,r8
  32:src/main.c    ****         pind1_curr = PIND & _BV(PIND1);
 242               	.LM43:
 243 00f8 C02E      		mov r12,r16
 244 00fa D12C      		mov r13,__zero_reg__
 245               	.LBB7:
 246               	.LBB6:
 248               	.Ltext3:
 277:/usr/avr/include/util/delay.h **** 
 278:/usr/avr/include/util/delay.h **** #else
 279:/usr/avr/include/util/delay.h **** 	uint8_t __ticks;
 280:/usr/avr/include/util/delay.h **** 	double __tmp2 ;
 281:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 3e6) * __us;
 282:/usr/avr/include/util/delay.h **** 	__tmp2 = ((F_CPU) / 4e6) * __us;
 283:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 284:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 285:/usr/avr/include/util/delay.h **** 	else if (__tmp2 > 65535)
 286:/usr/avr/include/util/delay.h **** 	{
 287:/usr/avr/include/util/delay.h **** 		_delay_ms(__us / 1000.0);
 288:/usr/avr/include/util/delay.h **** 	}
 289:/usr/avr/include/util/delay.h **** 	else if (__tmp > 255)
 290:/usr/avr/include/util/delay.h **** 	{
 291:/usr/avr/include/util/delay.h **** 		uint16_t __ticks=(uint16_t)__tmp2;
 292:/usr/avr/include/util/delay.h **** 		_delay_loop_2(__ticks);
 293:/usr/avr/include/util/delay.h **** 		return;
 294:/usr/avr/include/util/delay.h **** 	}
 295:/usr/avr/include/util/delay.h **** 	else
 296:/usr/avr/include/util/delay.h **** 		__ticks = (uint8_t)__tmp;
 297:/usr/avr/include/util/delay.h **** 	_delay_loop_1(__ticks);
 298:/usr/avr/include/util/delay.h **** #endif
 299:/usr/avr/include/util/delay.h **** }
 250               	.LM44:
 251 00fc 00C0      		rjmp .L6
 252               	.LBE6:
 253               	.LBE7:
 260               	.Lscope1:
 261               		.text
 263               	.Letext0:
 264               		.ident	"GCC: (GNU) 11.2.0"
 265               	.global __do_copy_data
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc9GwZid.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc9GwZid.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc9GwZid.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc9GwZid.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc9GwZid.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc9GwZid.s:23     .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
LCD_Init
LCD_Clear
sprintf
LCD_WriteString
LCD_MoveCursor
PrintByte
__do_copy_data
